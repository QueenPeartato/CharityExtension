Connect the Google API script to our manifest
Guide: http://stackoverflow.com/questions/18681803/loading-google-api-javascript-client-library-into-chrome-extension 

There are several solutions here, but the simplest and most universal seems to be connecting the API 
script to the manifest: 
  "background": {
  "scripts": [
    "background.js",
    "gapi-client.js"
  ]
}), 

this uses a main background script (background.js) to which all of the gapi-client.js is copied (away from it's
online location) and applied to our manifest. 

 The script in background.js looks like this:
 
 window.gapi_onload = function(){
  console.log('gapi loaded.', gapi.auth, gapi.client);

  // Do things you want with gapi.auth and gapi.client.
}

My assumption is that we won't have to do much more with gapi.auth and gapi.client.

This is the link to the api script:

https://apis.google.com/js/client.js


Potentially use Materialize collapsible tiles for different charities/locations

Use Materialize modals for popup ability

Use a github repo in order to cache the data from the IRS website and have the app use this information
OR
Have the extension cache the data from the IRS site on install, and then periodically (every 3-4 mo.)

Curation of the data would be the best option for organizing and inputting data
	- Using API's can bring in content that isn't reputable
	- USing API's can bring in content that goes against Chrome's regulations

BEGIN:
Begin with Chrome extension tutorials for building simple extensions
"Sample extensions for Google Chrome"

Make JSON file with charities in an array for searching 